
#include "TemplateManager.hpp"

static int item_current = 0;

// Left
static int mb_selected = 0;
static std::vector<std::string> mb_syslabels;

// Fonction pour charger le contenu hexadécimal d'un fichier .png
static std::vector<uint8_t> loadPngHex(const std::string &filePath)
{
    std::ifstream file(filePath, std::ios::binary);

    if (!file)
    {
        std::cerr << "Erreur lors de l'ouverture du fichier. -> " + filePath << std::endl;
        return {};
    }

    // Déterminez la taille du fichier
    file.seekg(0, std::ios::end);
    size_t fileSize = file.tellg();
    file.seekg(0, std::ios::beg);

    // Créez un vecteur pour stocker le contenu hexadécimal
    std::vector<uint8_t> hexContent(fileSize);

    // Lisez le contenu hexadécimal du fichier
    file.read(reinterpret_cast<char *>(hexContent.data()), fileSize);

    return hexContent;
}
static std::vector<std::shared_ptr<Cherry::Image>> logos;
static std::vector<ImTextureID> textures;

static void logo(const std::string &path, int index, int total)
{
    uint32_t w, h;
    // Chargez le contenu hexadécimal du fichier .png
    std::vector<uint8_t> hexTable = loadPngHex(path);
    const uint8_t *hexData = hexTable.data();

    if (total > logos.size())
    {
        void *data = Cherry::Image::Decode(hexData, hexTable.size(), w, h);
        std::shared_ptr<Cherry::Image> _icon = std::make_shared<Cherry::Image>(w, h, Cherry::ImageFormat::RGBA, data); // ML
        logos.push_back(_icon);
        VX_FREE(data);
        ImTextureID addIcon = logos[index]->GetImGuiTextureID(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
        textures.push_back(addIcon);
    }

    ImGui::Image(textures[index], ImVec2(50, 50));
}

TemplateManager::TemplateManager(VxContext *_ctx, InstanceFactory *_factory)
{
    this->ctx = _ctx;
    this->factory = _factory;

    {
        uint32_t w, h;
        void *data = Cherry::Image::Decode(icons::i_template, icons::i_template_size, w, h);
        m_TemplateIcon = std::make_shared<Cherry::Image>(w, h, Cherry::ImageFormat::RGBA, data);
        free(data);
    }
    {
        uint32_t w, h;
        void *data = Cherry::Image::Decode(icons::i_list, icons::i_list_size, w, h);
        m_ListIcon = std::make_shared<Cherry::Image>(w, h, Cherry::ImageFormat::RGBA, data);
        free(data);
    }
    {
        uint32_t w, h;
        void *data = Cherry::Image::Decode(icons::i_refresh, icons::i_refresh_size, w, h);
        m_RefreshIcon = std::make_shared<Cherry::Image>(w, h, Cherry::ImageFormat::RGBA, data);
        free(data);
    }
    {
        uint32_t w, h;
        void *data = Cherry::Image::Decode(icons::i_trash, icons::i_trash_size, w, h);
        m_TrashIcon = std::make_shared<Cherry::Image>(w, h, Cherry::ImageFormat::RGBA, data);
        free(data);
    }
    {
        uint32_t w, h;
        void *data = Cherry::Image::Decode(icons::i_add, icons::i_add_size, w, h);
        m_AddIcon = std::make_shared<Cherry::Image>(w, h, Cherry::ImageFormat::RGBA, data);
        free(data);
    }
}

void TemplateManager::OnImGuiRender()
{
    static ImTextureID listIcon = this->m_ListIcon->GetImGuiTextureID(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
    static ImTextureID trashIcon = this->m_TrashIcon->GetImGuiTextureID(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
    static ImTextureID templateIcon = this->m_TemplateIcon->GetImGuiTextureID(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);

    if (ImGui::Begin("Template manager", &templateIcon, &this->opened, ImGuiWindowFlags_MenuBar))
        this->menubar();

    float oldsize = ImGui::GetFont()->Scale;
    ImGui::GetFont()->Scale *= 1.3;
    ImGui::PushFont(ImGui::GetFont());

    ImGui::TextColored(ImVec4(1.0f, 1.0f, 1.0f, 0.5f), "Templates available for");
    ImGui::SameLine();
    ImGui::Text(this->ctx->name.c_str());

    ImGui::GetFont()->Scale = oldsize;
    ImGui::PopFont();

    oldsize = ImGui::GetFont()->Scale;
    ImGui::GetFont()->Scale *= 0.9;
    ImGui::PushFont(ImGui::GetFont());

    ImGui::TextColored(ImVec4(1.0f, 1.0f, 1.0f, 0.5f), "Vortex version");
    ImGui::SameLine();
    ImGui::Text(this->ctx->version.c_str());

    ImGui::GetFont()->Scale = oldsize;
    ImGui::PopFont();

    ImGui::Separator();

    // Left
    static int selected = 0;
    static std::vector<std::string> labels;
    static std::vector<std::string> syslabels;

    for (auto sys_template : ctx->IO.sys_templates)
    {
        bool add = true;

        for (auto label : labels)
        {
            if (label == sys_template->m_group)
            {
                add = false;
            }
        }

        if (add)
        {
            labels.push_back(sys_template->m_group);
        }
    }

    {
        ImGui::BeginChild("left pane", ImVec2(230, -1), true);
        for (int i = 0; i < labels.size(); i++)
        {
            if (i == 0)
            {
                std::string label = "All templates (" + std::to_string(this->ctx->IO.sys_templates.size()) + ")";
                ImGui::TextColored(ImVec4(0.4, 0.4, 0.4, 1), label.c_str());
            }

            std::string label;

            int number = 0;
            for (auto em : this->ctx->IO.sys_templates)
            {
                if (em->m_group == labels[i])
                {
                    number++;
                }
            }
            label = labels[i];
            label += " (";
            label += std::to_string(number);
            label += ")";

            label += "##";
            label += labels[i];

            if (ImGui::Selectable(label.c_str(), selected == i))
                selected = i;
        }
        ImGui::EndChild();
    }
    ImGui::SameLine();
    ImGui::Separator();
    ImGui::SameLine();

    std::string label = "packhhqsdsdageView###";
    ImGuiID id = ImGui::GetID(label.c_str());
    ImGui::BeginChildFrame(id, ImVec2(0, 0), true);

    for (int i = 0; i < ctx->IO.sys_templates.size(); i++)
    {
        if (ctx->IO.sys_templates[i]->m_group == labels[selected])
        {
            std::string childLabel = "module##" + ctx->IO.sys_templates[i]->m_name;

            ImGui::BeginChild(childLabel.c_str(), ImVec2(0, 180), true);

            {
                ImGui::BeginChild("LOGO_", ImVec2(70, 70), true);
                logo(ctx->IO.sys_templates[i]->m_logo_path, i, this->ctx->IO.sys_templates.size());

                ImGui::EndChild();
                ImGui::SameLine();
            }

            {
                ImGui::BeginChild("TEXT_", ImVec2(220, 68), true);
                float oldsize = ImGui::GetFont()->Scale;
                ImGui::GetFont()->Scale *= 1.3;
                ImGui::PushFont(ImGui::GetFont());

                ImGui::TextColored(ImVec4(1.0f, 1.0f, 1.0f, 0.8f), ctx->IO.sys_templates[i]->m_proper_name.c_str());

                ImGui::GetFont()->Scale = oldsize;
                ImGui::PopFont();

                // ImGui::SameLine();

                ImGui::TextColored(ImVec4(1.0f, 1.0f, 1.0f, 0.5f), ctx->IO.sys_templates[i]->m_name.c_str());

                ImGui::EndChild();
            }

            {
            }

            {
                ImGui::TextColored(ImVec4(1.0f, 1.0f, 1.0f, 0.5f), "From ");
                ImGui::SameLine();
                ImGui::Text(ctx->IO.sys_templates[i]->m_author.c_str());
            }

            {
                ImGui::TextColored(ImVec4(1.0f, 1.0f, 1.0f, 0.5f), "Description : ");
                ImGui::SameLine();
                ImGui::TextWrapped(ctx->IO.sys_templates[i]->m_description.c_str());
            }

            {
                std::string label = "Add to " + ctx->name;

                if (ImGui::ImageButtonWithText(trashIcon, label.c_str(), ImVec2(this->m_RefreshIcon->GetWidth(), this->m_RefreshIcon->GetHeight())))
                {
                    // Behavior
                }
            }

            ImGui::EndChild();
        }
    }

    ImGui::EndChildFrame();
    ImGui::End();
}

// Helper functions for menu items

static void handleRefresh()
{
    // Behavior
}

static void handleAddToProject(const std::string &name, const std::string &version)
{
}

static void handleFilterBuildRebuild()
{
    // Behavior
}

static void handleGlobalBuild()
{
    // Behavior
}

static void handleCreateModule()
{
    // Behavior
}

static void handleSearch()
{
    // Behavior
}

void TemplateManager::addModuleModal()
{
}

// Main menu function

void TemplateManager::menubar()
{
    static ImTextureID refreshIcon = this->m_RefreshIcon->GetImGuiTextureID(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
    static ImTextureID addIcon = this->m_AddIcon->GetImGuiTextureID(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);

    static bool open_ADDMODULE = false;

    for (auto em : ctx->IO.sys_em)
    {
        bool add = true;

        for (auto label : mb_syslabels)
        {
            if (label == em->m_group)
            {
                add = false;
            }
        }

        if (add)
        {
            mb_syslabels.push_back(em->m_group);
        }
    }

    if (ImGui::BeginMenuBar())
    {
        if (ImGui::ImageButtonWithText(refreshIcon, "Refresh", ImVec2(this->m_RefreshIcon->GetWidth(), this->m_RefreshIcon->GetHeight())))
        {
            handleRefresh();
        }
        ImGui::Separator();
        if (ImGui::BeginMenu("Filters"))
        {
            if (ImGui::MenuItem("Build/Rebuild single parts"))
            {
                handleFilterBuildRebuild();
            }
            if (ImGui::MenuItem("Global build"))
            {
                handleGlobalBuild();
            }
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Create a module"))
        {
            if (ImGui::MenuItem("Build/Rebuild single parts"))
            {
                handleCreateModule();
            }
            if (ImGui::MenuItem("Global build"))
            {
                handleGlobalBuild();
            }
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Search"))
        {
            if (ImGui::MenuItem("Build/Rebuild single parts"))
            {
                handleSearch();
            }
            if (ImGui::MenuItem("Global build"))
            {
                handleGlobalBuild();
            }
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }
}
