#include <stack>
#include <algorithm>
#include <cctype>
#include <unordered_set>

#ifndef CONTENTBROWSER_H
#define CONTENTBROWSER_H

#include "../include/instanceFactory.h"

enum class ContentShowMode
{
	Thumbmails,
	List,
	Columns
};

enum class FileTypes
{
	// Very low level
	File_ASM,
	File_BIN,

	// Programming languages
	File_C,
	File_H,
	File_CPP,
	File_HPP,
	File_INL,
	File_RUST,
	File_ZIG,
	File_GO,
	File_JAVA,
	File_JAVASCRIPT,
	File_COBOL,
	File_PASCAL,
	File_CARBON,

	// Misc
	File_CFG,
	File_JSON,
	File_PICTURE,
	File_TXT,
	File_MD,
	File_YAML,
	File_INI,
	File_GIT,

	// Vortex
	File_VORTEX_CONFIG,

	// Other
	File_UNKNOW,

};

struct FileHandler
{
	FileTypes for_type;
	std::string file_handler_name;
	std::string handler_module_name;
	std::string handler_plugin_name;
};

class ContentBrowserPanel
{
public:
	ContentBrowserPanel(VxContext *_ctx, const std::string &parent);

	void OnImGuiRender(const std::string &parent, std::function<void(ImGuiWindow *)> controller);
	bool MyButton(const std::string &name, const std::string &path, const std::string &description, const std::string &size, bool selected, const std::string &logo, ImU32 bgColor, ImU32 borderColor, ImU32 lineColor, float maxTextWidth, float borderRadius);

	void ChangeDirectory(const std::filesystem::path &newDirectory);
	void GoBack();
	void GoForward();
	void DrawPathBar();

	void Select(const std::string &path)
	{
		for (auto already : m_Selected)
		{
			if (path == already)
			{
				return;
			}
		}
		m_Selected.push_back(path);
	}

	void ChangeShowMode(ContentShowMode mode)
	{
		this->m_ShowMode = mode;
	}

	void DrawFolderIcon(ImVec2 pos, ImVec2 size, ImU32 color);
	void MyFolderButton(const char *id, ImVec2 size, ImU32 color, const std::string &path);
	void DrawHierarchy(std::filesystem::path path, bool isDir, const std::string &label);

	VxContext *ctx;
	std::string parent;
	void menubar();

private:
	bool opened;

	bool m_ThumbnailMode = true;
	bool m_ListMode = false;

	bool m_ShowTypes = false;
	bool m_ShowSizes = false;

	// !!!
	bool m_ShowFolderPannel = true;
	bool m_ShowFilterPannel = false;
	bool m_ShowThumbnailVisualizer = false;
	bool m_ShowSelectionQuantifier = false;

	ContentShowMode m_ShowMode = ContentShowMode::Thumbmails;

	std::filesystem::path m_BaseDirectory;

	std::filesystem::path m_CurrentDirectory;
	std::stack<std::filesystem::path> m_BackHistory;
	std::stack<std::filesystem::path> m_ForwardHistory;

	std::vector<std::string> m_Selected;

	std::vector<std::filesystem::path> m_Favorites;

	std::shared_ptr<Cherry::Image> m_ProjectIcon;
	std::shared_ptr<Cherry::Image> m_FileIcon;
	std::shared_ptr<Cherry::Image> m_DirectoryIcon;
};

#endif // CONTENTBROWSER_H